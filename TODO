Library
-------

UIOMux support
	* [2009/11/13] current uiomux branch failure is probably because
	of the change in libuiomux from handing out physical addresses to
	virtual. So, the fix is likely to insert some uiomux_virt_to_phys()
	calls where physical addresses are required for the VPU.

	* use m4iph_start() function for uio locking etc.: it is actually
	called by the important avcbe_*() functions. Check middleware for
	details!

	* remove hardcoded memory addresses, replace with UIO-retrieved ones

AnnexB handling
	* AnnexB handling is useful for RTP; make this a runtime option;
	currently it is compile-time.

m4driverif.c
	* s/perror("open")/perror(buf)/

Dual encode
	* (uiomux-dual-encode branch) make shcodecs-enc take multiple control
	file inputs
	==> add dual encode support to sighttpd
	==> add dual encode support to gst-sh-mobile

Decoder cancel
	* returning != 0 from a vpu_decoded() callback stops the decoder,
	but resuming doesn't flush out the remaining frames. For testing,
	hack shcodecs-dec to always return 1 from the decoded callback, and
	try to get the original/correct output
	==> then use this to rate-limit buffers in omxil-sh

Compile options
	* (dec-enc-optional branch) make encode or decode disablable at
	compile time
	* make libshcodecs _native_ x86 build possible for building docs
	(with no library output)

Tools
-----

shcodecs-record

	* add --no-preview option
	Current --no-preview branch causes subsequent invocations to freeze
	and only capture 1 frame. It seems to block on the first VEU op.
	Perhaps some issue with VEU no-op?

shcodecs-play

	* print error if cannot init decoder (eg. no size given)

	* handle float framerate values (eg. shcodecs-play -r 29.97)
